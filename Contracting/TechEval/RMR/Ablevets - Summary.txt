Ablevets - Summary


Proposal Summary


The Offeror’s response described the technical and management approach to the problem identified in the Performance Work Statement (PWS).  The Offerors overall solution architecture was provided, showing the existing architecture, and their planned “to-be” architecture (Exhibit 3). This proposed to-be architecture included all elements called out in the RTEP for the desired solution architecture including (a) CPRS running as-is, unchanged over both the existing VISTA architecture and the to-be  (b) Centralized Model-driven VICS Services architecture via an (c) RPC emulation layer. The Model-driven VICS Service runs on top of (d) a separate, industry-standard NoSQL Data Store (Microsoft Azure, Amazon CosmosDB, or MongoDB) while at the same time providing (e) backwards compatibility and synchronization with legacy VISTA, allowing migration off the VISTA architecture without interruption in services to CPRS or VPR clients.

The proposal included extensive detail on how they would develop each of these to-be architectural components, why they are necessary, and features of each.  This started with the generation of the Native Data Model from the as-is VISTA Fileman data dictionaries, and then the refinement of a common subset of this across all 130 VISTAs (Common Native Data Model) as the foundation model to provide national VICS Services. Details on what, why, and how the Common Native Model would be refined, and how this would be automatically translated backwards and forwards from the Native Model to support backwards compatibility and new features and functionality was described (Exhibit 4). VICS Data Model categorization were described with examples and features (Exhibit 5). Common VICS Utility Services and their features and advantages were decribed (Exhibit 6). Portable VICS Interfaces and their benefits were described (section 2.4). Emulation of Remote Procedure Calls (RPCs) and emulation of the Virtual Patient Record (VPR) was decribed in step-by-step detail.  The use of Node.js compatible, cloud-based NoSQL data storage was described, including use of MongoDB,  Microsoft's CosmosDB, and Amazon's DynamoDB. Development of a Node Package Manager (NPM)-installable RPC Router and its features was described (section 2.8). Finally, implementation of Backward Synchnronization Service (section 2.9) was described to account for the interdependencies of the existing VISTA functionality in parallel with the new VICS Services.  All components of the above to-be architecture would be developed in pure JavaScript, Node.js-based, Node Package Manager (NPM)-installable plugins.

The developmemt of the Patient Data Entry VICS for was next described (section 3) A detailed component-by-component approach to this requirement was provided (Exhibit 7 and Exhibit 8). Secialized approaches specific for each functional domains (Allergy, Vitals, Problem) was described (Exhibit 9). 


Finally the proposal outlines the staffing levels by labor category and contract function and hours proposed for each referenced by prime and subcontractor.